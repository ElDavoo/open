wiki2html = ->
module?.exports = wiki2html
window?.wiki2html = wiki2html

###
Wiki2HTML - Converts Socialtext Wikitext syntax to HTML.

COPYRIGHT:

    Copyright (c) 2005-2011 Socialtext Corporation 
    655 High Street
    Palo Alto, CA 94301 U.S.A.
    All rights reserved.

Wiki2HTML is a derived work from the Wikiwyg javascript library.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

###

class Parser
  className: "Parser"
  init: ->
  
  parse: (input, receiver) ->
    return ""  unless typeof input is "string"
    @input = (if (input.search(/\n$/) is -1) then input + "\n" else input)
    @receiver = receiver  if receiver
    @receiver.init()
    @grammar = @create_grammar()
    @parse_blocks "top"
    @receiver.content()
  
  create_grammar: ->
    throw "Please define create_grammar in a derived class of Document.Parser."
  
  parse_blocks: (container_type) ->
    types = @grammar[container_type].blocks
    return  unless types
    while @input.length
      length = @input.length
      for type in types
        matched = @find_match("matched_block", type)
        if matched
          @input = @input.substr(matched.end)
          @handle_match type, matched
          break
      throw @classname + ": Reduction error for:\n" + @input + "\n" + JSON.stringify(this)  if @input.length >= length
    return
  
  handle_match: (type, match) ->
    grammar = @grammar[type]
    parse = (if grammar.blocks then "parse_blocks" else "parse_phrases")
    @subparse parse, match, type, grammar.filter
  
  find_match: (matched_func, type) ->
    rule = @grammar[type]
    re = rule.match
    throw "no regexp for type: " + type  unless re
    text_to_match = @input
    text_to_match = rule.pre_match(text_to_match)  if rule.pre_match
    capture = text_to_match.match(re)
    if capture
      match = this[matched_func].call(this, capture, @grammar[type].lookbehind)
      match.type = @grammar[type].type or type
      match.text = rule.post_match(match.text)  if rule.post_match
      return match
    return
  
  parse_phrases: (container_type) ->
    types = @grammar[container_type].phrases
    unless types
      @receiver.text_node @input or ""
      return
    while @input.length
      match = null
      for type in types
        matched = @find_match("matched_phrase", type)
        continue  unless matched
        if not match or (matched.begin < match.begin)
          match = matched
          break  if match.begin is 0
      unless match
        @receiver.text_node @input or ""
        break
      @receiver.text_node @input.substr(0, match.begin) or ""  unless match.begin is 0
      @input = @input.substr(match.end)
      @handle_match match.type, match
    return
  
  subparse: (func, match, type, filter) ->
    match.type = @grammar[type].type
    match.type = type  unless match.type?
    filtered_text = (if filter then filter(match) else null)
    @receiver.begin_node match  if match.type
    parser = new Document.Parser.Wikitext()
    parser.input = (if (not (filtered_text?)) then match.text else filtered_text)
    parser.grammar = @grammar
    parser.receiver = @receiver.instantiate()
    parser[func].call parser, type
    @receiver.insert parser.receiver
    @receiver.end_node match  if match.type
  
  matched_block: (capture) ->
    begin: capture.index
    text: capture[1]
    end: capture[0].length
    1: capture[2]
    2: capture[3]
    3: capture[4]
  
  matched_phrase: (capture, lookbehind) ->
    if lookbehind
      text = capture[2]
      begin = @input.indexOf(capture[1])
      return {
        text, begin, end: (begin + capture[1].length)
        1: RegExp.$2
        2: RegExp.$3
        3: RegExp.$4
      }
    begin: capture.index
    text: capture[1]
    end: capture.index + capture[0].length
    1: capture[2]
    2: capture[3]
    3: capture[4]

