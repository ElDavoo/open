wiki2html = (wiki) -> (new Parser).parse(wiki, new Emitter)
module?.exports = wiki2html
window?.wiki2html = wiki2html

###
Wiki2HTML - Converts Socialtext Wikitext syntax to HTML.

COPYRIGHT:

    Copyright (c) 2005-2011 Socialtext Corporation 
    655 High Street
    Palo Alto, CA 94301 U.S.A.
    All rights reserved.

Wiki2HTML is a derived work from the Wikiwyg javascript library.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

###

FFFC = new RegExp(String.fromCharCode(0xFFFC), 'g')

class Parser
  parse: (input, receiver) ->
    return ""  unless typeof input is "string"
    @input = (if (input.search(/\n$/) is -1) then input + "\n" else input)
    @receiver = receiver  if receiver
    @grammar = @create_grammar()
    @parse_blocks "top"
    @receiver.content()
  
  parse_blocks: (container_type) ->
    types = @grammar[container_type].blocks
    return  unless types
    while @input.length
      length = @input.length
      for type in types
        matched = @find_match("matched_block", type)
        if matched
          @input = @input.substr(matched.end)
          @handle_match type, matched
          break
      throw @classname + ": Reduction error for:\n" + @input + "\n" + JSON.stringify(this)  if @input.length >= length
    return
  
  handle_match: (type, match) ->
    grammar = @grammar[type]
    parse = (if grammar.blocks then "parse_blocks" else "parse_phrases")
    @subparse parse, match, type, grammar.filter
  
  find_match: (matched_func, type) ->
    rule = @grammar[type]
    re = rule.match
    throw "no regexp for type: " + type  unless re
    text_to_match = @input
    text_to_match = rule.pre_match(text_to_match)  if rule.pre_match
    capture = text_to_match.match(re)
    if capture
      match = this[matched_func].call(this, capture, @grammar[type].lookbehind)
      match.type = @grammar[type].type or type
      match.text = rule.post_match(match.text)  if rule.post_match
      return match
    return
  
  parse_phrases: (container_type) ->
    types = @grammar[container_type].phrases
    unless types
      @receiver.text_node @input or ""
      return
    while @input.length
      match = null
      for type in types
        matched = @find_match("matched_phrase", type)
        continue  unless matched
        if not match or (matched.begin < match.begin)
          match = matched
          break  if match.begin is 0
      unless match
        @receiver.text_node @input or ""
        break
      @receiver.text_node @input.substr(0, match.begin) or ""  unless match.begin is 0
      @input = @input.substr(match.end)
      @handle_match match.type, match
    return
  
  subparse: (func, match, type, filter) ->
    match.type = @grammar[type].type
    match.type = type  unless match.type?
    filtered_text = (if filter then filter(match) else null)
    @receiver.begin_node match  if match.type
    parser = new Parser
    parser.input = (if (not (filtered_text?)) then match.text else filtered_text)
    parser.grammar = @grammar
    parser.receiver = @receiver.instantiate()
    parser[func].call parser, type
    @receiver.insert parser.receiver
    @receiver.end_node match  if match.type
  
  matched_block: (capture) ->
    begin: capture.index
    text: capture[1]
    end: capture[0].length
    1: capture[2]
    2: capture[3]
    3: capture[4]
  
  matched_phrase: (capture, lookbehind) ->
    if lookbehind
      text = capture[2]
      begin = @input.indexOf(capture[1])
      return {
        text, begin, end: (begin + capture[1].length)
        1: RegExp.$2
        2: RegExp.$3
        3: RegExp.$4
      }
    begin: capture.index
    text: capture[1]
    end: capture.index + capture[0].length
    1: capture[2]
    2: capture[3]
    3: capture[4]

  create_grammar: ->
    all_blocks = [ "pre", "code", "html", "hr", "hx", "waflparagraph", "ul", "ol", "blockquote", "table", "p", "empty", "else" ]
    all_phrases = [ "waflphrase", "asis", "wikilink", "wikilink2", "a", "im", "mail", "file", "tt", "b", "i", "del", "a" ]
    re_huggy = (brace1, brace2) ->
      preAlphaNum = "\\w"
      preAlphaNum += ":;"  if brace1 == "-"
      brace2 = "\\" + (brace2 or brace1)
      brace1 = "\\" + brace1
      match: new RegExp("(?:^|[^" + brace1 + preAlphaNum + "])(" + brace1 + "(?=\\S)(?!" + brace2 + ")(.*?[^\\s" + brace2 + "])" + brace2 + "(?=[^" + brace2 + "\\w]|$))")
      phrases: (if (brace1 == "\\`") then null else all_phrases)
      lookbehind: true
    
    im_types =
      yahoo: "yahoo"
      ymsgr: "yahoo"
      callto: "callto"
      callme: "callto"
      skype: "callto"
      aim: "aim"
    
    im_label =
      aim: "AIM: %1"
      yahoo: "Yahoo: %1"
      callto: "Skype: %1"
    
    im_re = "(\\b("
    for key of im_types
      im_re += key + "|"
    im_re = im_re.replace(/\|$/, ")\\:([^\\s\\>\\)]+))")
    re_list = (bullet, filter_out) ->
      exclusion = new RegExp("(^|\n)" + filter_out + " *", "g")
      match: new RegExp("^(" + bullet + "+ .*\n" + "(?:[*-+#]+ .*\n)*" + ")(?:s*\n)?")
      blocks: [ "ul", "ol", "subl", "li" ]
      filter: (node) ->
        node.text.replace exclusion, "$1"
    
    _escape_pipes = (input) ->
      input.replace /{{(.*?)}}/g, (match, text) ->
        "{{" + text.replace(/\|/g, String.fromCharCode(0xFFFC)) + "}}"
    
    _unescape_pipes = (output) ->
      output.replace /{{(.*?)}}/g, (match, text) ->
        "{{" + text.replace(FFFC, "|") + "}}"
    return {
     _all_blocks: all_blocks
     _all_phrases: all_phrases
     top:
       blocks: all_blocks
     ol: re_list("#", "[*#]")
     ul: re_list("[-+*]", "[-+*#]")
     blockquote:
       match: /^((?:>[^\n]*\n)+)(?:\s*\n)?/
       blocks: [ "blockquote", "line" ]
       filter: (node) ->
        node.text.replace /(^|\n)>\ ?/g, "$1"
     
     line:
       match: /([^\n]*)\n/
       phrases: all_phrases
     
     subl:
       type: "li"
       match: /^(([^\n]*)\n[*#]+\ [^\n]*\n(?:[*#]+\ [^\n]*\n)*)(?:\s*\n)?/
       blocks: [ "ul", "ol", "li2" ]
     
     li:
       match: /([^\n]*)\n/
       phrases: all_phrases
     
     li2:
       type: ""
       match: /([^\n]*)\n/
       phrases: all_phrases
     
     html:
       match: /^(\.html\ *\n(?:[^\n]*\n)*?\.html)\ *\n(?:\s*\n)?/
       filter: (node) ->
         node._html = node.text
         ""
     
     pre:
       match: /^\.pre\ *\n((?:[^\n]*\n)*?)\.pre\ *\n(?:\s*\n)?/
     code:
       match: /^\.code-\w+\ *\n((?:[^\n]*\n)*?)\.code-\w+\ *\n(?:\s*\n)?/
     hr:
       match: /^--+(?:\s*\n)?/

     table:
       match: /^((?:\|\| *([^\|\n]+?) *\n)?(((\|.*\| \n(?=\|))|(\|.*\|  +\n)|(?:\|.*?\|\n))+))/
       blocks: [ "tr" ]
       filter: (node) ->
         node._options = node["1"] or ""
         node._border = true
         node._sort = false
         opts = node._options.match(/([^\s:=]+[:=]\s*\S*)/g) or []
         i = 0
         
         while i < opts.length
           match = opts[i].match(/^([^\s:=]+)[:=]\s*(\S*)/)
           key = match["1"]
           val = match["2"]
           node["_" + key] = (val != "off") and (val != "false")
           i++
         node["2"]
     
     tr:
       match: /^((?:(?:^|\n)\|.*?\|(?:\n| \n(?=\|)|  +\n)))/
       blocks: [ "td_multi_line_block", "td_single_line_block", "td_phrase", "td_final" ]
       filter: (node) ->
         node.text.replace /\s+$/, ""
     
     td_multi_line_block:
       pre_match: _escape_pipes
       match: /\|[ \t]*\n?(\s*?[^|]*?\n[^|]*?)[ \t]*(?=\|)/
       post_match: _unescape_pipes
       blocks: [ "pre", "html", "hr", "hx", "waflparagraph", "ol", "ul", "blockquote", "p", "empty", "else" ]
       filter: (node) ->
         node.type = "td"
         node.text.replace /\n?$/, "\n"
     
     td_single_line_block:
       pre_match: _escape_pipes
       match: /\|[ \t]*\n?((?:\*+|#+|>+|\^+)\s[^|]*?)[ \t]*(?=\|)/
       post_match: _unescape_pipes
       blocks: [ "hx", "ol", "ul" ]
       filter: (node) ->
         node.type = "td"
         node.text + "\n"
     
     td_phrase:
       pre_match: _escape_pipes
       match: /\|[ \t]*\n?(\s*?[^|]*?)[ \t]*(?=\|)/
       post_match: _unescape_pipes
       phrases: all_phrases
       filter: (node) ->
         node.type = "td"
         node.text
     
     td_final:
       match: /^\s*\|\s*/
       filter: (node) ->
         node.type = ""
     
     hx:
       match: /^((\^+) *([^\n]*?)(\s+=+)?\s*?\n+)/
       phrases: all_phrases
       filter: (node) ->
         node.type = "h" + node["1"].length
         node[2]
     
     p:
       match: /^((?:(?!(?:(?:\^+|\#+|\*+|\-+) |(--+)[^\n\S]*\n|\>|\.\w+\s*\n|\{[^\}\n]+\}\s*\n))[^\n]*\S[^\n]*\n)+(?:(?=^|\n)\s*\n)*)/
       phrases: all_phrases
       filter: (node) ->
         node.text.replace(/\n$/, "").replace /\n/g, String.fromCharCode(0xFFFC) + "\n"
     
     empty:
       match: /^(\s*\n)/
       filter: (node) ->
         node.type = ""
     
     else:
       match: /^(([^\n]*)\n)/
       phrases: []
       filter: (node) ->
         node.type = "p"
     
     waflparagraph:
       match: /^(?:"[^"]+")?\{([\w-]+(?=[\:\ \}])(?:\s*:)?\x20*[^\n}]*?\x20*)\}[\ \t]*\n(?:\s*\n)?/
       filter: (node) ->
         node._wafl = node._label = node.text
         ""
     
     waflphrase:
       match: /(?:^|[\s\-])((?:"([^\n]+?)")?\{([\w-]+(?=[\:\ \}])(?:\s*:)?\x20*[^\n]*?\x20*)\}(?=[\W_]|$))/
       filter: (node) ->
         node._wafl = node[2]
         node._label = node[1] or node._wafl
         ""
       
       lookbehind: true
     
     asis:
       match: /(\{\{([^\n]*?)\}\}(\}*))/
       filter: (node) ->
         node.type = ""
         node[1] + node[2]
     
     wikilink:
       match: /(?:^|[_\W])(\[()(?=[^\s\[\]])(.*?)\](?=[_\W]|$))/
       filter: (node) ->
         node._href = node[2]
         node.text or node[2]
       
       lookbehind: true
     
     wikilink2:
       type: "wikilink"
       match: /(?:"([^"]*)"\s*)(\[(?=[^\s\[\]])(.*?)\](?=[_\W]|$))/
       filter: (node) ->
         node._href = node[2]
         node[1] or node[2]
    
     a:
       match: /((?:"([^"]*)"\s*)?<?((?:http|https|ftp|irc|file):(?:\/\/)?[\;\/\?\:\@\&\=\+\$\,\[\]\#A-Za-z0-9\-\_\.\!\~\*\'\(\)%]+[A-Za-z0-9\/#])>?)/
       filter: (node) ->
         node._href = node[2]
         node[1] or node[2]
     
     file:
       match: /((?:"([^"]*)")?<(\\\\[^\s\>\)]+)>)/
       filter: (node) ->
         href = node[2].replace(/^\\\\/, "")
         node._href = "file://" + href.replace(/\\/g, "/")
         node["1"] or href
     
     im:
       match: (new RegExp(im_re))
       filter: (node) ->
         node._wafl = node[1] + ": " + node[2]
         node._label = (im_label[im_types[node[1]]] or "%1").replace(/%1/g, node[2])
         ""
     
     mail:
       match: /([\w+%\-\.]+@(?:[\w\-]+\.)+[\w\-]+)/
       filter: (node) ->
         node.type = "a"
         node._href = "mailto:" + node.text.replace(/%/g, "%25")
     
     tt: re_huggy("`")
     b: re_huggy("*")
     i: re_huggy("_")
     del: re_huggy("-")
   }
  
class Emitter
  constructor: -> @output = ""
  instantiate: -> new Emitter
  content: -> @output
  insert: (receiver) -> @output += receiver.output
  begin_node: (node) ->
    tag = node.type
    switch tag
      when 'asis', 'line'
        return
      when 'br', 'hr'
        @output += "<#{tag} />"
      when 'html'
        onload = "if (typeof(ss) != 'undefined' && ss.editor) { var recalc = function () { try { ss.editor.DoPositionCalculations() } catch (e) { setTimeout(recalc, 500) } }; recalc() } if (!window.image_dimension_cache) window.image_dimension_cache = {};window.image_dimension_cache['https://www2.socialtext.net/data/wafl/Raw%20HTML%20section.%20Edit%20in%20Wiki%20Text%20mode.?uneditable=1'] = [ @offsetWidth, @offsetHeight ]; @style.width = @offsetWidth + 'px'; @style.height = @offsetHeight + 'px'"
        @output += '<img alt="st-widget-'+node._html.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/>/, '&gt;')+'" src="https://www2.socialtext.net/data/wafl/Raw%20HTML%20section.%20Edit%20in%20Wiki%20Text%20mode.?uneditable=1" title="Raw HTML section. Edit in Wiki Text mode." onload="'+onload+'" />'
      when 'waflparagraph', 'waflphrase', 'im'
        onload = "if (typeof(ss) != 'undefined' && ss.editor) { var recalc = function () { try { ss.editor.DoPositionCalculations() } catch (e) { setTimeout(recalc, 500) } }; recalc() } if (!window.image_dimension_cache) window.image_dimension_cache = {};window.image_dimension_cache['https://www2.socialtext.net/data/wafl/"+node._label.replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/'/g, "\\'").replace(/\\/g, "\\\\")+"'] = [ @offsetWidth, @offsetHeight ]; @style.width = @offsetWidth + 'px'; @style.height = @offsetHeight + 'px'"
        if (not @renderImageAsNormalWAFL) and node._wafl.match(/^image:\s*(\S+)(?:\s+size=(\w+))?/)
          imageName = RegExp.$1
          width = RegExp.$2
          switch width
            when 'small'
              width = '100'
            when 'medium'
              width = '300'
            when 'large'
              width = 600
          if width and width.search(/^[.\d]+$/) == 0
            width = ' width="'+width+'"'
          if $? and $('#st-attachment-listing').size()
            found = null
            $('#st-attachment-listing a').each ->
              $_ = $(@)
              if $_.text() == imageName
                found = '<img alt="st-widget-{'+node._wafl.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/>/, '&gt;')+'}" src="' + $_.attr('href') + '" onload="'+onload+'"'+width+' />'
                return false
          if found
            @output += found
            return
        @output += '<img alt="st-widget-{'+node._wafl.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/>/, '&gt;')+'}" src="https://www2.socialtext.net/data/wafl/'+encodeURIComponent(node._label).replace(/%2F/g, '/')+'" onload="'+onload+'" />'
      when 'a', 'wikilink'
        @output += '<a href="'+encodeURI(node._href)+'">'
      when 'file'
        @output += '<a title="(network resource)" href="'+encodeURI(node._href)+'">'
      when 'table'
        cls = 'formatter_table'
        cls += ' sort' if node._sort
        cls += ' borderless' unless node._border
        @output += "<table #{
          if node._border then 'border="1" ' else ''
        } style=\"border-collapse:collapse\" options=\"#{
          node._options
        }\" class=\"#{cls}\">\n"
      when 'ul', 'ol', 'table', 'tr'
        @output += '<'+tag+">\n"
      else
        @output += '<'+tag+'>'
    return

  end_node: (node) ->
    tag = node.type
    switch tag
      when 'asis', 'br', 'hr', 'html', 'waflparagraph', 'waflphrase', 'im'
        return
      when 'line'
        @output += '<br />'
      when 'file', 'wikilink'
        @output += '</a>'
      else
        if tag.search(/^(?:p|ul|ol|li|h\d|table|tr|td)$/) is 0
          @output += '</'+tag+">\n"
        else
          @output += '</'+tag+'>'
    return

  text_node: (text, type) ->
    if /[&<>"']/.test(text)
        @output += text
            .replace(/&/g, '&amp;')
            .replace(/>/g, '&gt;')
            .replace(/</g, '&lt;')
            .replace(/"/g, '&#34;')
            .replace(/'/g, '&#39;')
            .replace(FFFC, '<br />')
    else
        @output += text.replace(FFFC, '<br />')
    return
