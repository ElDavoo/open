#!/usr/bin/env perl
# @COPYRIGHT@
use warnings;
use strict;
use Getopt::Long;
use Pod::Usage 1.12;
use FindBin;
use lib "$FindBin::Bin/../lib";
use Socialtext::Jobs;
use Socialtext::l10n qw/loc/;
use Socialtext::DaemonUtil;
use List::Util qw/max/;
use List::MoreUtils qw/first_index/;

# don't run as root
Socialtext::DaemonUtil->Check_and_drop_privs();

GetOptions(
    'h|help|?' => sub {pod2usage({-verbose => 1, -input => $0}); exit},
    'H|man'    => sub {pod2usage({-verbose => 2, -input => $0}); exit},
) or die;

my $Interval = shift;

my %header = (
    queued => loc('Queued'),
    grabbed => loc('Grabbed'),
    delayed => loc('Delayed'),
    succeeded => loc('Num OK'),
    failed => loc('Num Fail'),
    last_completed => loc('Last Completed'),
);
my @stat_order = (qw(queued grabbed delayed succeeded failed last_completed));
my @max_stats = (qw(last_completed));
my @time_stats = (qw(last_completed));
my @sum_stats = grep !/^last_completed$/, @stat_order;
my $name_header = loc('Job Type');
my $total = loc('Total');

while (1) {
    print show_total();
    last unless $Interval;
    select(undef, undef, undef, $Interval);
    print "\n";
}

sub show_total {
    my $stats = Socialtext::Jobs->stat_jobs();

    my %display_name =
        map { /Socialtext::Job::(.+)/; $_ => ($1 || $_) }
        keys %$stats;

    my @table;
    my %total;
    $total{$_} = 0 for @max_stats;
    while (my ($job_name, $job_stats) = each %$stats) {
        next if $job_name eq 'Socialtext::Job::Test';

        my @row;
        push @row, $display_name{$job_name};
        push @row, $job_stats->{$_} for @stat_order;
        push @table, \@row;

        $total{$_} += $job_stats->{$_} for @sum_stats;
        for (@max_stats) {
            $total{$_} = $job_stats->{$_} if $job_stats->{$_} > $total{$_};
        }
    }

    @table = sort { $a->[0] cmp $b->[0] } @table;
    push    @table, [$total,       map { $total{$_} }  @stat_order];

    for my $stat (@time_stats) {
        my $i = first_index { $_ eq $stat } @stat_order;
        $i+=1; # offset for name
        for my $row (@table) {
            $row->[$i] &&= localtime($row->[$i]);
        }
    }

    unshift @table, [$name_header, map { $header{$_} } @stat_order];

    my @width = _column_widths(\@table);

    # underline the header and data segments
    my $lines = [ map { '-' x $_ } @width ];
    splice @table, 1, 0, $lines;
    splice @table, -1, 0, $lines;

    my $format = '%' . $width[0] . 's  ';
    $format .= " %-$width[$_]s" for (1 .. $#{$table[0]});
    $format .= "\n";

    my $output = '';
    $output .= sprintf $format, @$_ for @table;
    return $output;
}

sub _column_widths {
    my $table = shift;
    my @widths;
    for my $col (0 .. $#$table) {
        push @widths, max map {length($_->[$col]||'')} @$table;
    }
    return @widths;
}

=head1 NAME

ceq-stat - Provide a human-readable summary of the jobs in
ceqlotron's queue.

=head1 SYNOPSIS

B<ceq-stat>

B<ceq-stat> 1.5

=head1 OPTIONS

    --help      This help page
    --man       Manual page

An optional delay interval can be provided to repeat the output.

=head1 SAMPLE OUTPUT

 Jobs in the queue:
   AttachmentIndex  1
               Cmd  5 (1 grabbed)
         PageIndex  0
             Total  6

=head1 SEE ALSO

L<celqlotron(1)>, L<ceq-read(1)>

=cut
