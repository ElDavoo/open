#!/usr/bin/env perl
# @COPYRIGHT@
use warnings;
use strict;
use FindBin;
use lib "$FindBin::Bin/../lib";
use Socialtext::Jobs;
use Socialtext::File qw/get_contents/;
use Socialtext::Log 'st_log', 'st_timed_log';
use Socialtext::Paths;
use Socialtext::SQL qw/get_dbh sql_execute/;
use Socialtext::Timer;
use Getopt::Long;
use Pod::Usage;
use Parallel::ForkManager;
use Time::HiRes qw/sleep/;

# don't run as root
if ($> == 0) {
    exec(qw/sudo -u www-data/, $0, @ARGV);
}

my $PID_FILE = Socialtext::Paths::pid_file('ceqlotron');

# Number of child processes we have running.
my $RunningChildren = 0;

# Whether or not an exit has been requested.
my $ExitPlease = 0;

# Initialize and parse command-line switches.
my ( $WantHelp, $RunInForeground, $OnlyOnce, $OutputTo ) = ( 0, 0, 0, '' );
my $PrintPid;
my $Kick;
Getopt::Long::Configure('bundling');
GetOptions(
    'help|h'       => \$WantHelp,
    'foreground|f' => \$RunInForeground,
    'output|O=s'   => \$OutputTo,
    'once|o'       => \$OnlyOnce,
    'pid'          => \$PrintPid,
    'kick'         => \$Kick,
) or exit 1;

pod2usage(verbose => 1) if $WantHelp;

if ($PrintPid) {
    exit 0 unless -e $PID_FILE;
    my $pid = get_contents($PID_FILE);
    chomp $pid;
    print "$pid\n";
    exit 0;
}

if ($Kick) {
    print "This action will reset grabbed status for jobs.\n"
        . "You should not do this while jobs are currently being run.\n"
        . "\nType 'yes' to continue...\n";
    my $ans = <STDIN>; chomp $ans;
    if ($ans eq 'yes') {
        print "Updating jobs ...\n";
        sql_execute('UPDATE job SET grabbed_until = 0');
    }
    else {
        print "Not updating jobs ...\n";
    }
    exit 0;
}

exit_if_already_running();
redirect_output();
maybe_fork();
write_pid_file();
st_log->notice("ceqlotron starting");
install_signal_handlers();

# Lets be explicit here about what jobs we want to process
my $Jobs = Socialtext::Jobs->new;
$Jobs->can_do('Test');
$Jobs->can_do('PageIndex');
$Jobs->can_do('AttachmentIndex');

my $max_concurrency = Socialtext::AppConfig->ceqlotron_max_concurrency;
my $PM = Parallel::ForkManager->new($max_concurrency);
$PM->run_on_finish( sub { $RunningChildren-- } );
$PM->run_on_start(  sub { 
        $RunningChildren++;
        st_log->info("ceqlotron fork - concurrency $RunningChildren");
    } );

main_loop();
wait_for_all_children();
exit_gracefully();



sub install_signal_handlers {
    $SIG{TERM} = sub {
        st_log->notice("ceqlotron caught SIGTERM.  Will exit ASAP.");
        $ExitPlease = 1;
    };
    $SIG{INT} = \&exit_gracefully;
}

sub exit_gracefully {
    unless ($OnlyOnce) {
        unlink $PID_FILE or die "Cannot unlink $PID_FILE: $!";
    }
    st_log->notice("ceqlotron exiting");
    exit 0;
}

sub wait_for_all_children {
    return unless $RunningChildren;
    st_log->info("ceqlotron waiting for $RunningChildren children to exit");
    $PM->wait_all_children;
}

sub write_pid_file {
    return if $OnlyOnce;

    open my $pid_fh, '>', $PID_FILE or die "$PID_FILE: $!";
    $pid_fh->print("$$\n") or die "write $PID_FILE: $!";
    close $pid_fh or die "close $PID_FILE: $!";
}

sub main_loop {
    LOOP: while (1) {
        eval {
            while (my $job = $Jobs->find_job_for_workers()) {
                last LOOP if $ExitPlease;
                $PM->start and next;

                # Force disconnect the database handle, child will re-connect
                get_dbh()->disconnect;

                my $t = Socialtext::Timer->new;
                $Jobs->work_once($job);
                st_log->info(
                    sprintf('Finished %s in %0.2fs',$job->funcname, $t->elapsed));
                exit;
            }
        };
        if ($@) {
            st_log->info("Ceqltron error: $@");
        }

        last LOOP if $ExitPlease || $OnlyOnce;
        sleep Socialtext::AppConfig->ceqlotron_period;
    }
}

sub redirect_output {
    if ($OutputTo) {
        my $oldfh = select;
        open STDOUT, '>>', $OutputTo or die "STDOUT > $OutputTo: $!";
        select STDOUT; $| = 1;
        open STDERR, '>>', $OutputTo or die "STDERR > $OutputTo: $!";
        select STDERR; $| = 1;
        select $oldfh;
        close STDIN;
    }
}

sub maybe_fork {
    return if $RunInForeground;

    my $child_pid = fork;

    if (! defined $child_pid) {
        die "fork: $!";
    }
    elsif ($child_pid != 0) { # in the parent
        exit 0;
    }
}

sub exit_if_already_running {
    return unless -e $PID_FILE;
    my $pid = get_contents($PID_FILE);
    my $alive = kill 0 => $pid;
    exit if $alive;
}

=head1 NAME

ceqlotron - Execute asynchronous jobs.

=head1 SYNOPSIS

B<ceqlotron> [ OPTIONS ]

=head1 DESCRIPTION

Unless given the C<-f> or C<--foreground> options, C<ceqlotron> forks and runs
as a daemon.  Unless given the C<-o> or C<--once> options, it runs until
killed and writes its PID in C</var/run/socialtext/ceqlotron.pid>.

Periodically, the daemon runs through the loop described below.  The default
period for the loop is 5 seconds, but this can be overridden with the
L<Socialtext::AppConfig> variable C<ceqlotron_period>.

=head1 MAIN LOOP

If jobs are available to be run, C<ceqlotron> will fork a child process
(up to C<ceqlotron_max_concurrency> as defined in L<Socialtext::AppConfig>.

The child process will run the job, and then exit.

=head1 OPTIONS

    -f,--foreground         If this option is given, ceqlotron stays
                            in the foreground.
    -o,--once               This causes ceqlotron to run through
                            the MAIN LOOP only once.
    --kick                  Reset the grabbed time for all jobs.
    --pid                   Print the current daemon pid (if running).
    -O,--output=FILE        Redirect stdout and stderr to FILE.
    -h,--help               Show help.

=head1 SIGNALS

    TERM        stop forking; exit gracefully as soon as all children
                have exited
    INT         exit gracefully immediately

=head1 EXIT CODES

    0       normal exit
    2       ceqlotron received an INT or TERM signal and exited
            gracefully
    255     exceptional error condition (there should be a diagnostic
            message)

=head1 SEE ALSO

L<Socialtext::AppConfig>, L<nlw(1)>, L<ceq-stat(1)>, L<ceq-read(1)>

=cut
