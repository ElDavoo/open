#!/usr/bin/perl
# @COPYRIGHT@
use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../lib";
use lib "$ENV{ST_CURRENT}/nlw/lib";
use Try::Tiny;

use Socialtext::Async;
use Socialtext::Log qw/st_log/;
use Socialtext::TimestampedWarnings;

use Socialtext::AppConfig;
use Socialtext::HTTP::Ports;
use Socialtext::Handler::Userd;

use Getopt::Long;
my $shutdown_delay;
my $port;
GetOptions(
    'shutdown-delay=i' => \$shutdown_delay,
    'port=i' => \$port,
);
$port ||= Socialtext::HTTP::Ports->userd_port;

st_log->info("userd is starting up...");

{
    # unbuffer stderr/stdout
    select STDERR; $|=1;
    select STDOUT; $|=1;
}

my %args = (
    port => $port,
);
$args{shutdown_delay} = $shutdown_delay if $shutdown_delay;

unless (Socialtext::AppConfig->is_appliance) {
    # change args for running under dev-env
    $args{shutdown_delay} ||= 5.0;
}

# TODO: put this and the "killing" part in Socialtext::Async::Wrapper into a
# sep. module.  Refactor pushd too.
use Coro::State ();
for my $coro (Coro::State::list()) {
     $coro->{_preserve_on_fork} = 1;
}

$0 = 'st-userd';
my $h = $Socialtext::Handler::Userd::SINGLETON
      = Socialtext::Handler::Userd->new(\%args);
Scalar::Util::weaken $h;

push @Socialtext::Async::Wrapper::AT_FORK, sub {
    return unless $h;
    $h->at_fork;
};

try { $h->run; }
catch {
    warn "userd stopping due to exception: $_";
    st_log->error("userd stopping due to exception: $_");
};

st_log->info("userd done");

exit 0;
