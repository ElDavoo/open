#!/usr/bin/env perl
# @COPYRIGHT@
use strict;
use warnings;
use List::MoreUtils qw/uniq/;
use Try::Tiny;
use File::Temp qw/tempdir tempfile/;
use Guard;
use Socialtext::SQL qw/sql_execute/;
use Socialtext::Workspace;
use Socialtext::User;
use Socialtext;
use Socialtext::Attachment;
use Socialtext::Upload;
use Socialtext::File qw/mime_type/;

my $dir = tempdir(CLEANUP => 1);
foreach_attachment(sub {
    my $att = shift;
    my $upload = $att->upload;

    my ($fh, $tmpfile) = tempfile();
    my $guard = scope_guard { unlink $tmpfile };
    $upload->copy_to_fh($fh);


    my $type = mime_type($tmpfile, $upload->filename, $upload->mime_type);
    update_mime_type($upload->attachment_id => $type);
    Socialtext::JobCreator->index_page($att->page, 'solr',
        attachment_job_class => 'Socialtext::Job::AttachmentReIndex',
    );
});

exit;
################################################################################

sub update_mime_type {
    my $id = shift;
    my $mime_type = shift;

    sql_execute(qq{
        UPDATE attachment
           SET mime_type = ?
         WHERE attachment_id = ?
    }, $mime_type, $id);
}

sub foreach_attachment {
    my $coderef = shift;

    my $sth = attachment_sth();
    while (my $row = $sth->fetchrow_hashref) {
        my $proto = make_proto($row);
        my $attachment = Socialtext::Attachment->new($proto);

        try {
            $coderef->($attachment);
        }
        catch {
            my $id = $proto->{upload}->attachment_id;
            die "couldn't update attachment $id: $_\n";
        };
    }
}

sub make_proto {
    my $param = shift;

    my $proto = { map { $_ => delete $param->{$_} }
        qw/id workspace_id page_id deleted/ };
  
    $param->{created_at} = delete $param->{created_at_utc}
        if $param->{created_at_utc};

    $proto->{upload} = Socialtext::Upload->new($param);

    my $ws = Socialtext::Workspace->new(workspace_id => $proto->{workspace_id});
    my $hub = Socialtext->new->load_hub(
        current_workspace => $ws, current_user => Socialtext::User->SystemUser);
    $hub->registry->load;
    $proto->{hub} = $hub;

    return $proto;
}

sub attachment_sth {
    my $COLS = join(', ',
        uniq(Socialtext::Attachment->COLUMNS, Socialtext::Upload->COLUMNS));

    my $sth = sql_execute(qq{
        SELECT $COLS,
               created_at AT TIME ZONE 'UTC' || '+0000' AS created_at_utc
          FROM page_attachment pa
          JOIN attachment a USING (attachment_id)
         WHERE mime_type = 'application/binary'
    });
}
