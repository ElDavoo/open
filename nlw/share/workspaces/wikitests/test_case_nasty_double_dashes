| *Comment* | Test Case: Nasty Double Dashes | KNOWN NASTY |

This tests {rt: 26202} and is still broken

Link text for a widget that contains a double dash blows up the editor.
e.g. `{Hello -- World}{link: help [Socialtext Documentation]}`
Set test_string to such a string, then make a widget with that as the link text, then blow it up.
Unfortunately, Selenium keeps right on going, delivering a false PASS, while a real user is hosed.

| set | test_string | `Hello -- World %%start_time%%` |
| set | test_string_escaped | `Hello \-\- World %%start_time%%` |

| click_and_wait | st-home-link |  |
| click_and_wait | st-newpage-link |  |
| wait_for_element_visible_ok | link=Advanced | 30000 |
| click_ok | link=Advanced |  |
| wait_for_element_visible_ok | wikiwyg_wikitext_textarea | 30000 |
| type_ok | st-newpage-pagename-edit | Nasty Double Dashes %%start_time%% |
| *Comment* | put the nasty string in as widget link text |  |
| wait_for_element_visible_ok | wikiwyg_wikitext_textarea | 30000 |
| type_ok | wikiwyg_wikitext_textarea | `"%%test_string%%"{link: help [Socialtext Documentation]}` |
| click_ok | link=Simple |  |

At this point, in FF, the UI is hung, displaying Loading...
Trying to verify that Loading... is present passes whether Loading is present or not.
Why is verify finding it even when it is hidden. Is it because CSS is hiding it?
That makes testing for it useless.

| click_and_wait | st-save-button-link |  |

Selenium Save even works on the PC where the browser hangs badly if you do it by hand.

None of the tricks I tried made the FF browser hang for selenium. The only way to tell things went wrong
was to know that the final result should be on a line by itself, matching `/^\s*%%test_string_escaped%%$/m`

| *Comment* | The last line of the page should contain only %%test_string%% |  |
| text_like | st-page-maincontent | qr/^\s*%%test_string_escaped%%$/m |

| *Comment* | Test Case: Nasty Double Dashes COMPLETED |  |

^^ END

This is what is printed out by the tester when you force the test to fail so you can see the string it is matching against

.pre
#                   'Canonical Test Data Set
#  Hello -- World 1186950521 title
#  Hello -- World 1186950521<!-- wiki: Hello -- World 1186950521'

.pre

Note that the test string (Hello -- World 1186950521) appears at both the beginning and the end of the third line, with garbage in between.
And the right answer would just have the text string on a line by itself on the third line, so this regexp should match it and should fail to match in the garbage case. `/^\s*%%test_string%%$/m`
