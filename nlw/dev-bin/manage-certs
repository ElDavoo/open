#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;
use FindBin qw($Bin);
use lib "$Bin/../lib";
use Socialtext::System qw/shell_run/;
use Term::ANSIColor;
use Sys::Hostname;
use Socialtext::AppConfig;
#use List::MoreUtils qw/all/;

my $STUB = '/C=US/ST=CA/L=Palo Alto/O=Socialtext';

my $action = shift;
usage() unless $action;

my $name   = '';
my $server = '';
my $force  = 0;
my $dryrun = 0;
GetOptions(
    'username=s' => \$name,
    'server=s'   => \$server,
    'force'      => \$force,
    'dry-run'    => \$dryrun,
);

my $ca_cert = 'ca/cert';
my $ca_key  = 'ca/key.nopass';

if ($action eq 'init') {
    error("CA directory exists, use --force")
        if -e $ca_cert && !$force;

    my $subj = $STUB .'/CN=ca@ken.socialtext.net/';

    print color('magenta');
    shell_run('-rm -Rf {cert,ca,working,binary}') if $force;
    shell_run('-mkdir {cert,ca,working,binary}');
    shell_run("openssl genrsa -out $ca_key");
    shell_run("openssl req -x509 -new -key $ca_key -out $ca_cert -subj '$subj'");
    print color('reset');

    message("Initialization Complete");
}
elsif ($action eq 'client') {
    usage() unless $name;
    error("This doesn't look like a CA directory")
        unless -e $ca_cert;

    my $key    = "cert/$name.key.nopass";
    my $csr    = "working/$name.csr";
    my $cert   = "cert/$name.crt";
    my $binary = "binary/$name.p12";
    my $subj   = "$STUB/CN=$name/";

    error("Cert '$name' already exists, use --force")
        if -e $cert && !$force;

    print color('magenta');
    shell_run("openssl genrsa -out $key");
    shell_run("openssl req -new -key $key -out $csr -subj '$subj'");
    shell_run("openssl x509 -req -in $csr -CA $ca_cert -CAkey $ca_key -CAcreateserial -out $cert");
    shell_run("openssl pkcs12 -export -name 'client $name TEST' -clcerts -in $cert -inkey $key -passout 'pass:password' -out $binary");
    shell_run("rm $csr");
    print color('reset');

    message("Signed cert is in '$cert'");
}
elsif ($action eq 'install') {
    error("This doesn't look like a CA directory")
        unless -e $ca_cert;

    $server ||= hostname();
    my $key = "working/$server.key";
    my $csr = "working/$server.csr";
    my $cert = "working/$server.crt";
    my $subj = "$STUB/CN=$server/";

    my $path = Socialtext::AppConfig->is_appliance()
        ? '' : $ENV{HOME} . '/.nlw';

    print color('magenta');
    shell_run("openssl genrsa -out $key");
    shell_run("openssl req -new -key $key -out $csr -subj '$subj'");
    shell_run("openssl x509 -req -in $csr -CA $ca_cert -CAkey $ca_key -CAcreateserial -out $cert");

    unless ($dryrun) {
        shell_run("mkdir -p $path/etc/ssl/{certs,private}");
        shell_run("cp $cert $path/etc/ssl/certs/");
        shell_run("cp $key $path/etc/ssl/private/");
        shell_run("cp $ca_cert $path/etc/ssl/certs/$server.client.crt");
    }

    shell_run("rm $csr");
    print color('reset');

    message("Installed certs");
}
elsif ($action eq 'help') {
    usage();
}
else {
    message("Action '$action' is not valid", 'red');
    usage();
}

exit;

sub message {
    my $msg = shift;
    my $color = shift || 'cyan';
    print color($color), "\n$msg", color('reset'), "\n\n";
}

sub error {
    my $msg = shift;
    die color('red'), "\n$msg", color('reset'), "\n\n";
}

sub usage {
    print <<EOT;
  USAGE: $0 init|client|install [--username] [--server] [--force] [--dry-run]

  Manage a very simple CA.

  COMMANDS:
    init: Initialize your CA. More specific, make a passwordless key and
          self-sign it. If you've already got a CA cert, you can
          re-initialize by passing this command the `--force` option.
          Doing so will invalidate any existing client or server certs.

    client: Create a client cert. Requires the `--username` param. You may
         re-create a client cert with the `--force` option.

    install: Install the CA cert and a custom server cert in a dev-env or
         VE for testing. By default, the command will create a server cert
         with the same name as the machine is running on. You can override
         this by passing in a `--server` param. The certs will not be
         copied into place if a `--dry-run` param is passed in.

EOT
    exit;
}

die $action;
