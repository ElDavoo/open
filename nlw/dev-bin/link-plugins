#!/usr/bin/env perl
# @COPYRIGHT@
use strict;
use warnings;
use FindBin;
use File::Path 'mkpath';
use Fatal qw/chdir mkdir symlink/;
use lib "$FindBin::Bin/../lib";
use File::Find 'find';
use File::Basename qw(basename);
use Socialtext::System qw/shell_run/;
use Term::ANSIColor;
use Getopt::Long;

my $lib_only = 0;
GetOptions(
    'help' => \&usage,
    'lib-only' => \$lib_only,
);
usage() unless @ARGV;

sub usage {
    my $msg = shift;
    warn "$msg\n" if $msg;
    die "USAGE: $0 [--lib-only] <plugin list>\n\n";
}

sub link_directory {
    my ($fromdir, $todir, $subdir) = @_;
    return unless -d "$fromdir/$subdir";

    if (!-d $todir) {
        warn "Making directory $todir\n";
        mkpath [$todir] or die "Cannot mkpath $todir: $!";
    }

    find({
        wanted => sub {
            return if m{/\.svn/};
            return if basename($_) =~ m{^\.};
            my $from = $_;
            (my $to = $from) =~ s{^$fromdir}{$todir};

            if (-d $from) {
                unlink $to if -l $to;
                if (!-d $to) {
                    warn "Making directory $to\n";
                    unlink $to if -l $to;
                    mkpath [$to] or die "Cannot mkpath $to: $!";
                }
            }
            else {
                unlink $to if -l $to;
                error("$to already exists and is a file! Remove it first\n")
                    if -e $to;

                symlink $from, $to 
                    or error("Cannot link $from to $to: $!");

                # add an entry to the local .gitignore if it's missing
                $to =~ s{^$todir/}{};
                unless (`grep $to .gitignore`) {
                    system("echo $to >> .gitignore");
                    system("git commit -m 'Added $to to gitignore' .gitignore");
                }
            }
        },
        no_chdir => 1,
    }, "$fromdir/$subdir");
}

while (my $plugin = shift) {
    warn "Linking the $plugin plugin\n";
    if (-d './nlw') {
        chdir './nlw';
    }
    elsif ($ENV{ST_CURRENT} && -d $ENV{ST_CURRENT}) {
        chdir "$ENV{ST_CURRENT}/nlw";
    }
    else {
        die "no ./nlw or ST_CURRENT env-var";
    }

    my $plugin_dir = "$FindBin::Bin/../../plugins/$plugin";
    usage("plugin $plugin doesn't exist") unless -d $plugin_dir;
    link_directory($plugin_dir, "$FindBin::Bin/..", 'lib');
    next if $lib_only;
    link_directory($plugin_dir, "$FindBin::Bin/..", 'bin');
    link_directory($plugin_dir, "$FindBin::Bin/..", 't');
    link_directory($plugin_dir, "$FindBin::Bin/..", 'build');
    link_directory($plugin_dir, "$ENV{HOME}/.nlw", 'etc/socialtext');
}

exit;

sub error {
    my $error = shift;

    print color 'yellow';
    print "\n\n$error\n\n";
    print color 'reset';

    exit;
}
