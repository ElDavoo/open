.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AnyEvent::HTTPD 3"
.TH AnyEvent::HTTPD 3 "2009-11-06" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
AnyEvent::HTTPD \- A simple lightweight event based web (application) server
.SH "VERSION"
.IX Header "VERSION"
Version 0.84
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use AnyEvent::HTTPD;
.Ve
.PP
.Vb 1
\&    my $httpd = AnyEvent::HTTPD\->new (port => 9090);
.Ve
.PP
.Vb 3
\&    $httpd\->reg_cb (
\&       '/' => sub {
\&          my ($httpd, $req) = @_;
.Ve
.PP
.Vb 8
\&          $req\->respond ({ content => ['text/html',
\&             "<html><body><h1>Hello World!</h1>"
\&             . "<a href=\e"/test\e">another test page</a>"
\&             . "</body></html>"
\&          ]});
\&       },
\&       '/test' => sub {
\&          my ($httpd, $req) = @_;
.Ve
.PP
.Vb 7
\&          $req\->respond ({ content => ['text/html',
\&             "<html><body><h1>Test page</h1>"
\&             . "<a href=\e"/\e">Back to the main page</a>"
\&             . "</body></html>"
\&          ]});
\&       },
\&    );
.Ve
.PP
.Vb 1
\&    $httpd\->run; # making a AnyEvent condition variable would also work
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a simple \s-1HTTPD\s0 for serving simple web application
interfaces. It's completly event based and independend from any event loop
by using the AnyEvent module.
.PP
It's \s-1HTTP\s0 implementation is a bit hacky, so before using this module make sure
it works for you and the expected deployment. Feel free to improve the \s-1HTTP\s0
support and send in patches!
.PP
The documentation is currently only the source code, but next versions of this
module will be better documented hopefully. See also the \f(CW\*(C`samples/\*(C'\fR directory
in the AnyEvent::HTTPD distribution for basic starting points.
.SH "FEATURES"
.IX Header "FEATURES"
.IP "* support for \s-1GET\s0 and \s-1POST\s0 requests." 4
.IX Item "support for GET and POST requests."
.PD 0
.IP "* support for \s-1HTTP\s0 1.0 keep\-alive." 4
.IX Item "support for HTTP 1.0 keep-alive."
.ie n .IP "* processing of ""x\-www\-form\-urlencoded""\fR and \f(CW""multipart/form\-data""\fR (\f(CW""multipart/mixed"") encoded form parameters." 4
.el .IP "* processing of \f(CWx\-www\-form\-urlencoded\fR and \f(CWmultipart/form\-data\fR (\f(CWmultipart/mixed\fR) encoded form parameters." 4
.IX Item "processing of x-www-form-urlencoded and multipart/form-data (multipart/mixed) encoded form parameters."
.IP "* support for streaming responses." 4
.IX Item "support for streaming responses."
.IP "* with version 0.8 no more dependend on \s-1LWP\s0 for HTTP::Date." 4
.IX Item "with version 0.8 no more dependend on LWP for HTTP::Date."
.PD
.SH "METHODS"
.IX Header "METHODS"
The AnyEvent::HTTPD class inherits directly from
AnyEvent::HTTPD::HTTPServer which inherits the event callback interface from
Object::Event.
.PP
Event callbacks can be registered via the Object::Event \s-1API\s0 (see the
documentation of Object::Event for details).
.PP
For a list of available events see below in the \fI\s-1EVENTS\s0\fR section.
.IP "\fBnew (%args)\fR" 4
.IX Item "new (%args)"
This is the constructor for a AnyEvent::HTTPD object.
The \f(CW%args\fR hash may contain one of these key/value pairs:
.RS 4
.ie n .IP "host => $host" 4
.el .IP "host => \f(CW$host\fR" 4
.IX Item "host => $host"
The \s-1TCP\s0 address of the \s-1HTTP\s0 server will listen on. Usually 0.0.0.0 (the
default), for a public server, or 127.0.0.1 for a local server.
.ie n .IP "port => $port" 4
.el .IP "port => \f(CW$port\fR" 4
.IX Item "port => $port"
The \s-1TCP\s0 port the \s-1HTTP\s0 server will listen on. If undefined some
free port will be used. You can get it via the \f(CW\*(C`port\*(C'\fR method.
.ie n .IP "request_timeout => $seconds" 4
.el .IP "request_timeout => \f(CW$seconds\fR" 4
.IX Item "request_timeout => $seconds"
This will set the request timeout for connections.
The default value is 60 seconds.
.ie n .IP "backlog => $int" 4
.el .IP "backlog => \f(CW$int\fR" 4
.IX Item "backlog => $int"
The backlog argument defines the maximum length the queue of pending
connections may grow to.  The real maximum queue length will be 1.5 times more
than the value specified in the backlog argument.
.Sp
See also \f(CW\*(C`man 2 listen\*(C'\fR.
.Sp
By default will be set by AnyEvent::Socket\f(CW\*(C`::tcp_server\*(C'\fR to \f(CW128\fR.
.ie n .IP "connection_class => $class" 4
.el .IP "connection_class => \f(CW$class\fR" 4
.IX Item "connection_class => $class"
This is a special parameter that you can use to pass your own connection class
to AnyEvent::HTTPD::HTTPServer.  This is only of interest to you if you plan
to subclass AnyEvent::HTTPD::HTTPConnection.
.ie n .IP "request_class => $class" 4
.el .IP "request_class => \f(CW$class\fR" 4
.IX Item "request_class => $class"
This is a special parameter that you can use to pass your own request class
to AnyEvent::HTTPD.  This is only of interest to you if you plan
to subclass AnyEvent::HTTPD::Request.
.RE
.RS 4
.RE
.IP "\fBport\fR" 4
.IX Item "port"
Returns the port number this server is bound to.
.IP "\fBhost\fR" 4
.IX Item "host"
Returns the host/ip this server is bound to.
.IP "\fBstop_request\fR" 4
.IX Item "stop_request"
When the server walks the request \s-1URI\s0 path upwards you can stop
the walk by calling this method. You can even stop further handling
after the \f(CW\*(C`request\*(C'\fR event.
.Sp
Example:
.Sp
.Vb 3
\&   $httpd\->reg_cb (
\&      '/test' => sub {
\&         my ($httpd, $req) = @_;
.Ve
.Sp
.Vb 1
\&         # ...
.Ve
.Sp
.Vb 4
\&         $httpd\->stop_request; # will prevent that the callback below is called
\&      },
\&      '' => sub { # this one wont be called by a request to '/test'
\&         my ($httpd, $req) = @_;
.Ve
.Sp
.Vb 3
\&         # ...
\&      }
\&   );
.Ve
.IP "\fBrun\fR" 4
.IX Item "run"
This method is a simplification of the \f(CW\*(C`AnyEvent\*(C'\fR condition variable
idiom. You can use it instead of writing:
.Sp
.Vb 2
\&   my $cvar = AnyEvent\->condvar;
\&   $cvar\->wait;
.Ve
.IP "\fBstop\fR" 4
.IX Item "stop"
This will stop the \s-1HTTP\s0 server and return from the
\&\f(CW\*(C`run\*(C'\fR method \fBif you started the server via that method!\fR
.SH "EVENTS"
.IX Header "EVENTS"
Every request goes to a specific \s-1URL\s0. After a (\s-1GET\s0 or \s-1POST\s0) request is
received the \s-1URL\s0's path segments are walked down and for each segment
a event is generated. An example:
.PP
If the \s-1URL\s0 '/test/bla.jpg' is requestes following events will be generated:
.PP
.Vb 3
\&  '/test/bla.jpg' \- the event for the last segment
\&  '/test'         \- the event for the 'test' segment
\&  ''              \- the root event of each request
.Ve
.PP
To actually handle any request you just have to register a callback for the event
name with the empty string. To handle all requests in the '/test' directory
you have to register a callback for the event with the name \f(CW'/test'\fR.
Here is an example how to register an event for the example \s-1URL\s0 above:
.PP
.Vb 3
\&   $httpd\->reg_cb (
\&      '/test/bla.jpg' => sub {
\&         my ($httpd, $req) = @_;
.Ve
.PP
.Vb 3
\&         $req\->respond ([200, 'ok', { 'Content\-Type' => 'text/html' }, '<h1>Test</h1>' }]);
\&      }
\&   );
.Ve
.PP
See also \f(CW\*(C`stop_request\*(C'\fR about stopping the walk of the path segments.
.PP
The first argument to such a callback is always the AnyEvent::HTTPD object
itself.  The second argument (\f(CW$req\fR) is the AnyEvent::HTTPD::Request
object for this request. It can be used to get the (possible) form parameters
for this request or the transmitted content and respond to the request.
.PP
Along with the above mentioned events these events are also provided:
.ie n .IP "request => $req" 4
.el .IP "request => \f(CW$req\fR" 4
.IX Item "request => $req"
Every request also emits the \f(CW\*(C`request\*(C'\fR event, with the same arguments and
semantics as the above mentioned path request events.  You can use this to
implement your own request multiplexing. You can use \f(CW\*(C`stop_request\*(C'\fR to stop
any further processing of the request as the \f(CW\*(C`request\*(C'\fR event is the first
thing that is executed for an incoming request.
.ie n .IP "client_connected => $host\fR, \f(CW$port" 4
.el .IP "client_connected => \f(CW$host\fR, \f(CW$port\fR" 4
.IX Item "client_connected => $host, $port"
.PD 0
.ie n .IP "client_disconnected => $host\fR, \f(CW$port" 4
.el .IP "client_disconnected => \f(CW$host\fR, \f(CW$port\fR" 4
.IX Item "client_disconnected => $host, $port"
.PD
These events are emitted whenever a client coming from \f(CW\*(C`$host:$port\*(C'\fR connects
to your server or is disconnected from it.
.SH "CACHING"
.IX Header "CACHING"
Any response from the \s-1HTTP\s0 server will have \f(CW\*(C`Cache\-Control\*(C'\fR set to \f(CW\*(C`max\-age=0\*(C'\fR and
also the \f(CW\*(C`Expires\*(C'\fR header set to the \f(CW\*(C`Date\*(C'\fR header. Meaning: Caching is disabled.
.PP
If you need caching or would like to have it you can send me a mail or even
better: a patch :)
.SH "AUTHOR"
.IX Header "AUTHOR"
Robin Redeker, \f(CW\*(C`<elmex at ta\-sa.org>\*(C'\fR
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
People who contributed to this module:
.IP "* Mons Anderson" 4
.IX Item "Mons Anderson"
Optimizing the regexes in AnyEvent::HTTPD::HTTPConnection and adding
the \f(CW\*(C`backlog\*(C'\fR option to AnyEvent::HTTPD.
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-bs\-httpd at rt.cpan.org\*(C'\fR,
or through the web interface at
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=AnyEvent\-HTTPD>.  I will be
notified, and then you'll automatically be notified of progress on your bug as
I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc AnyEvent::HTTPD
.Ve
.PP
You can also look for information at:
.IP "* Git repository" 4
.IX Item "Git repository"
<http://git.ta\-sa.org/AnyEvent\-HTTPD.git>
.IP "* \s-1RT:\s0 \s-1CPAN\s0's request tracker" 4
.IX Item "RT: CPAN's request tracker"
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=AnyEvent\-HTTPD>
.IP "* AnnoCPAN: Annotated \s-1CPAN\s0 documentation" 4
.IX Item "AnnoCPAN: Annotated CPAN documentation"
<http://annocpan.org/dist/AnyEvent\-HTTPD>
.IP "* \s-1CPAN\s0 Ratings" 4
.IX Item "CPAN Ratings"
<http://cpanratings.perl.org/d/AnyEvent\-HTTPD>
.IP "* Search \s-1CPAN\s0" 4
.IX Item "Search CPAN"
<http://search.cpan.org/dist/AnyEvent\-HTTPD>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.Vb 2
\&   Andrey Smirnov \- for keep\-alive patches.
\&   Pedro Melo     \- for valuable input in general and patches.
.Ve
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2008\-2009 Robin Redeker, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
